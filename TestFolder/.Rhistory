source("RSetup.R")
package.setup(workingdir = "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/")
search_term <- "Glaziella"
api_key <- NULL
path_to_output_dir <- "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/"
repeats <- 5
entrez_db_searchable("nuccore")
source("RSetup.R")
package.setup(workingdir = "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/")
search_term <- "Otidea"
api_key <- NULL
path_to_output_dir <- "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/"
entrez_db_searchable("taxonomy")
r_search <- entrez_search(db = "taxonomy",
term = paste0(search_term, "[subtree]"),
retmax = 999,
use_history = TRUE) # gets all IDs for genus
ID_n <- length(r_search$ids) # reducing repetitions by reusing this variable
# FETCHING SEQUENCE DATA FOR EVERY ID
loop <- 1
all_recs_list <- list()
unavailable_list <- matrix(ncol = 2)
colnames(unavailable_list) <- c("Tax_ID", "Skipped_taxa")
i <- 1
ID <- r_search$ids[i]
cat("\nID ", i, ":\t", ID, "\t")
fetch_id2 <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
id = ID)
fetch_id2$links
fetch_id2$links$taxonomy_nuccore
entrez_db_summary("nuccore", fetch_id2$links$taxonomy_nuccore)
entrez_summary("nuccore", fetch_id2$links$taxonomy_nuccore)
fetch_id$links$taxonomy_nuccore
fetch_id <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
web_history = upload) # linking between the nucleotide & taxonomy databases - this is when the inconsistencies come in
upload <- entrez_post(db = "taxonomy",
id = ID) # getting the taxonomy with IDs
fetch_id <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
web_history = upload) # linking between the nucleotide & taxonomy databases - this is when the inconsistencies come in
fetch_id$links$taxonomy_nuccore
fetch_id2$links$taxonomy_nuccore
entrez_summary("nuccore", fetch_id2$links$taxonomy_nuccore)
sum_test <- entrez_summary("nuccore", fetch_id2$links$taxonomy_nuccore)
sum_test$uid
sum_test$title
sum_test$geneticcode
sum_test$taxid
ID
sum_test$statistics
sum_test$oslt
all_recs_list[[loop]] <- entrez_fetch(db = "nuccore",
id = fetch_id2,
rettype = "fasta")
fetch_id2$links$taxonomy_nuccore
fetch_id$links$taxonomy_nuccore
fetch_id2 <- fetch_id$links$taxonomy_nuccore
all_recs_list[[loop]] <- entrez_fetch(db = "nuccore",
id = fetch_id2,
rettype = "fasta")
knitr::opts_chunk$set(echo = TRUE)
source("RSetup.R")
package.setup(workingdir = "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/")
search_term <- "Otidea"
api_key <- NULL
path_to_output_dir <- "/Users/varga/OneDrive/Documents/GitHub/PhyloGenie/TestFolder/"
search_term <- "Diehliomyces"
r_search <- entrez_search(db = "taxonomy",
term = paste0(search_term, "[subtree]"),
retmax = 999,
use_history = TRUE) # gets all IDs for genus
ID_n <- length(r_search$ids) # reducing repetitions by reusing this variable
ID <- r_search$ids[1]
fetch_id <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
id = ID)
summary_list <- entrez_summary("nuccore", fetch_id$links$taxonomy_nuccore)
lapply(summary_list, function(x) c(xuid, x$oslt$value, x$slen))
lapply(summary_list, function(x) c(x$uid, x$oslt$value, x$slen))
key_info <- lapply(summary_list, function(x) c(x$uid, x$oslt$value, x$slen))
select_idx <- lapply(key_info, function(x) x[3] > lower & x < upper)
lower <- as.character(400)
upper <- as.character(10000)
select_idx <- lapply(key_info, function(x) x[3] > lower & x < upper)
select_idx
select_idx <- lapply(key_info, function(x) x[3] > lower & x[3] < upper)
select_idx
upper
key_info[[1]][3]
select_idx <- lapply(key_info, function(x) as.numeric(x[3]) > lower & as.numeric(x[3]) < upper)
select_idx
## filter for sequence length
lower <- 400
upper <- 10000
select_idx <- lapply(key_info, function(x) as.numeric(x[3]) > lower & as.numeric(x[3]) < upper)
select_idx
select_idx <- unlist(lapply(key_info, function(x) as.numeric(x[3]) > lower & as.numeric(x[3]) < upper))
access_ID <- lapply(key_in[idx], function(x) x[2])
access_ID <- lapply(key_info[idx], function(x) x[2])
access_ID <- lapply(key_info[select_idx], function(x) x[2])
access_ID <- unlist(lapply(key_info[select_idx], function(x) x[2]))
fetch_id2 <- unlist(lapply(key_info[select_idx], function(x) x[2]))
fetch_id2 <- unlist(lapply(key_info[select_idx], function(x) x[1]))
lower <- 400
upper <- 10000
access_ID <- vector()
fetch_id2 <- vector()
for(i in 1:10){
fetch_id <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
id = ID)
summary_list <- entrez_summary("nuccore", fetch_id$links$taxonomy_nuccore)
key_info <- lapply(summary_list, function(x) c(x$uid, x$oslt$value, x$slen))
select_idx <- unlist(lapply(key_info, function(x) as.numeric(x[3]) > lower & as.numeric(x[3]) < upper))
access_ID_temp <- unlist(lapply(key_info[select_idx], function(x) x[2]))
fetch_id2_temp <- unlist(lapply(key_info[select_idx], function(x) x[1]))
access_ID <- c(access_ID, access_ID_temp)
fetch_id2 <- c(fetch_id2, fetch_id2_temp)
cat("\nloop1\t", length(access_ID))
}
lower <- 400
upper <- 10000
access_ID <- vector()
fetch_id2 <- vector()
for(i in 1:10){
fetch_id <- entrez_link(dbfrom = "taxonomy",
db = "nuccore",
id = ID)
summary_list <- entrez_summary("nuccore", fetch_id$links$taxonomy_nuccore)
key_info <- lapply(summary_list, function(x) c(x$uid, x$oslt$value, x$slen))
select_idx <- unlist(lapply(key_info, function(x) as.numeric(x[3]) > lower & as.numeric(x[3]) < upper))
access_ID_temp <- unlist(lapply(key_info[select_idx], function(x) x[2]))
fetch_id2_temp <- unlist(lapply(key_info[select_idx], function(x) x[1]))
access_ID <- unique(c(access_ID, access_ID_temp))
fetch_id2 <- unique(c(fetch_id2, fetch_id2_temp))
cat("\nloop1\t", length(access_ID))
}
View(summary_list)
